%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Date: 12th Dec 2018
% Editor: Daisuke Kodaira
% e-mail: daisuke.kodaira03@gmail.com
% Description for this code:
%   Make "LongTermEVPastData.csv" from "EVdataModified.csv" which is original dataset.
%   Input file EVdataModified.csv is generated by "ConvertCh2Num.m"
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
clear;
clc;
filename1 = 'EVdataModifed_debug.csv';
opts = detectImportOptions(filename1);
T = readtable(filename1,'ReadVariableNames',true,...
    'Format','%d %s %d %d %{dd/MM/yyyy}D %{HH:mm}D %{dd/MM/yyyy}D %{HH:mm}D %f %d %d %d %d');

% Erase the record in case that the EndTime is missing (still connected)
T = rmmissing(T,'DataVariables',{'EndTime'});

% Combine date and time
T.StartDate.Format = 'dd/MM/yyyy HH:mm';
T.EndDate.Format = 'dd/MM/yyyy HH:mm';
T.StartTime.Format = 'dd/MM/yyyy HH:mm';
T.EndTime.Format = 'dd/MM/yyyy HH:mm';
StartTime = T.StartDate + timeofday(T.StartTime);
EndTime = T.EndDate + timeofday(T.EndTime);

% Calculate kwh for 1min; each record has one 1min kwh
ConnectionDuration = minutes(EndTime - StartTime);
oneMinutUsage = T.TotalKWh./ConnectionDuration;
for i = 1:size(ConnectionDuration,1) % erase Inf caused by the case that StartTime and EndTime have exact same time stamp 
    if oneMinutUsage(i) == Inf
        oneMinutUsage(i) = T.TotalKWh(i);
    end
end

% Calculate kwh for fragmented time 
[energyAmount, modifiedStartTime, modifiedEndTime]   = CalcFragmentTime(StartTime, EndTime, oneMinutUsage);

% Make table for outputfiles; calculate 15min kwh for each record
buildinIndex = 1; % anynumber is ok
data_matrix = zeros(size(T,1),11);
steps = 1;
for record = 1:size(T,1)
    curerrentTime = StartTime;
    while curerrentTime(record) <= modifiedEndTime(record)
        data_matrix(steps,1) = buildinIndex;                                     % BuildingID; all 1
        data_matrix(steps,2) = T.CPID(record);                                 % Charging Point ID
        data_matrix(steps,3) = year(curerrentTime(record));           % year
        data_matrix(steps,4) = month(curerrentTime(record));        % month
        data_matrix(steps,5) = day(curerrentTime(record));            % Day
        data_matrix(steps,6) = hour(curerrentTime(record));          % hour
        data_matrix(steps,7) = floor(minute(curerrentTime(record))/15);      % Quarter   
        if curerrentTime(record) == StartTime(record)
           data_matrix(steps,12) = energyAmount(record,1);      % Charge/Discharge[kwh]
           curerrentTime = modifiedStartTime;
           steps = steps+1;
        elseif curerrentTime(record) < modifiedEndTime(record)
            data_matrix(steps,12) = 15*oneMinutUsage(record);
            curerrentTime = curerrentTime + minutes(15);
            steps = steps+1;
        else
            data_matrix(steps,1) = buildinIndex;                                     % BuildingID; all 1
            data_matrix(steps,2) = T.CPID(record);                                 % Charging Point ID
            data_matrix(steps,3) = year(curerrentTime(record));           % year
            data_matrix(steps,4) = month(curerrentTime(record));        % month
            data_matrix(steps,5) = day(curerrentTime(record));            % Day
            data_matrix(steps,6) = hour(curerrentTime(record));          % hour
            data_matrix(steps,7) = floor(minute(curerrentTime(record))/15);      % Quarter   
            data_matrix(steps,12) = energyAmount(record,2);              % Charge/Discharge[kwh]
            steps = steps+1;
            break;
        end
    end
    if mod(record,1000) == 0
        fprintf('%.2f [%%]\n', 100*record/size(T,1));
    end
end

% Sort the records as time instances
data_matrix = sortrows(data_matrix, [3 4 5 6 7]);         % sort by 3;year, 4;month, 5;dya, 6;hour, 7;quarter 

%% Consolidate energy consumptions for the same time instance
% initilization
record=1; % 1 quarter (record for output file)
total_energy = 0;
% Consolidation
for time_inst = 1:size(data_matrix,1)
    total_energy = total_energy + data_matrix(time_inst, 12);
    % check if new quarter or not
    if data_matrix(time_inst,7) ~= data_matrix(time_inst+1,7) 
        output(record,1) = data_matrix(time_inst,3);  % get year
        output(record,2) = data_matrix(time_inst,4); % get month
        output(record,3) = data_matrix(time_inst,3);  % get year
        output(record,4) = data_matrix(time_inst,4); % get month
        output(record,5) = data_matrix(time_inst,5);  % get day
        output(record,6) = data_matrix(time_inst,6);  % get hour
        output(record,7) = data_matrix(time_inst,7);  % get quarter
        record = record+1;
    end
end

%% output
% Write the data to csv files
% Write header
hedder = {'BuildingIndex', 'ChargingPointID', 'Year', 'Month', 'Day', 'Hour', 'Quarter', 'P1(Day)', 'P2(Holiday)',...
                  'P3(HighestTemp)', 'P4(Weather)', 'Charge/Discharge[kwh]', 'SOC[%]'};
fid = fopen('LongTermEVData.csv','wt');
fprintf(fid,'%s,',hedder{:});
fprintf(fid,'\n');
% Write data
fprintf(fid,['%d,', '%4d,', '%02d,', '%02d,', '%02d,', '%d,', '%d,', '%d,', '%d,', '%f,', '%f', '\n'], output');
fclose(fid);